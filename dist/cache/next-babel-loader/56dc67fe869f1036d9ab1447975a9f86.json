{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { toJS } from 'mobx';\nexport default function useMergeSort(array, swappedFn) {\n  var newArray;\n  return _regeneratorRuntime.async(function useMergeSort$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          array = toJS(array).map(function (element, originalIndex) {\n            return _objectSpread({}, element, {\n              originalIndex: originalIndex\n            });\n          });\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(mergeHelper(array, swappedFn));\n\n        case 3:\n          newArray = _context.sent;\n          return _context.abrupt(\"return\", newArray);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar mergeHelper = function mergeHelper(array, swappedFn) {\n  var mid, left, right;\n  return _regeneratorRuntime.async(function mergeHelper$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(array.length < 2)) {\n            _context2.next = 2;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", array);\n\n        case 2:\n          mid = Math.floor(array.length / 2);\n          left = array.slice(0, mid);\n          right = array.slice(mid);\n          _context2.t0 = doMerge;\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(mergeHelper(left, swappedFn));\n\n        case 8:\n          _context2.t1 = _context2.sent;\n          _context2.next = 11;\n          return _regeneratorRuntime.awrap(mergeHelper(right, swappedFn));\n\n        case 11:\n          _context2.t2 = _context2.sent;\n          _context2.t3 = swappedFn;\n          return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t1, _context2.t2, _context2.t3));\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar doMerge = function doMerge(left, right, swappedFn) {\n  var results, onlyIndexes;\n  return _regeneratorRuntime.async(function doMerge$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          results = [];\n\n          while (left.length && right.length) {\n            results.push(left[0].value < right[0].value ? left.shift() : right.shift());\n          }\n\n          results = [].concat(_toConsumableArray(results), _toConsumableArray(left), _toConsumableArray(right));\n          onlyIndexes = results.map(function (_ref) {\n            var originalIndex = _ref.originalIndex;\n            return originalIndex;\n          });\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(swappedFn(Math.min.apply(Math, _toConsumableArray(onlyIndexes)), Math.max.apply(Math, _toConsumableArray(onlyIndexes)), results));\n\n        case 6:\n          return _context3.abrupt(\"return\", results);\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":null,"metadata":{},"sourceType":"module"}