{"ast":null,"code":"import useBubbleSort from './bubble-sort';\nimport useMergeSort from './merge-sort';\nimport useQuickSort from './quick-sort';\nimport useHeapSort from './heap-sort';\nconst sortFunctions = {\n  'bubble-sort': useBubbleSort,\n  'merge-sort': useMergeSort,\n  'quick-sort': useQuickSort,\n  'heap-sort': useHeapSort\n};\nconst sortsArray = Object.keys(sortFunctions);\n\nconst testArray = async testFn => {\n  const length = 1000;\n  const array = new Array(length).fill(null).map(() => ({\n    value: Math.floor(Math.random() * length) + 1\n  }));\n  const sorted = array.slice().sort(({\n    value: a\n  }, {\n    value: b\n  }) => a - b);\n  const tested = await testFn(array);\n  console.log('sorted', sorted.length);\n  console.log('tested', tested.length);\n  console.log(sorted, tested);\n  return JSON.stringify(sorted) === JSON.stringify(tested);\n};\n\nexport { useBubbleSort, useQuickSort, useMergeSort, useHeapSort, sortsArray, testArray, sortFunctions };\nexport default async function useSort(state, delayFn) {\n  state.sorting = true;\n\n  switch (state.currentAlgorithm) {\n    case 'merge-sort':\n      await useMergeSort(state.elements, async (i, j, newArray) => {\n        if (!state.sorting) return;\n        const elements = state.elements.slice(i, j + 1);\n        let k = 0;\n\n        for (const element of elements) {\n          element.current = true;\n          await delayFn();\n          element.value = newArray[k++].value;\n          await delayFn(false);\n          element.current = false;\n        }\n      });\n      break;\n\n    case 'bubble-sort':\n      await useBubbleSort(state.elements, async (i, j) => {\n        if (!state.sorting || i === j) return;\n        const array = state.elements;\n        const temp = array[i].value;\n        array[i].current = true;\n        array[j].current = true;\n        await delayFn();\n        array[i].value = array[j].value;\n        array[j].value = temp;\n        array[i].current = false;\n        array[j].current = false;\n      });\n      break;\n\n    case 'quick-sort':\n      await useQuickSort(state.elements, async (i, j) => {\n        if (!state.sorting || i === j) return;\n        const array = state.elements;\n        const temp = array[i].value;\n        array[i].current = true;\n        array[j].current = true;\n        await delayFn();\n        array[i].value = array[j].value;\n        array[j].value = temp;\n        array[i].current = false;\n        array[j].current = false;\n      });\n      break;\n\n    case 'heap-sort':\n      await useHeapSort(state.elements, async (i, j) => {\n        if (!state.sorting || i === j) return;\n        const array = state.elements;\n        const temp = array[i].value;\n        array[i].current = true;\n        array[j].current = true;\n        await delayFn();\n        array[i].value = array[j].value;\n        array[j].value = temp;\n        array[i].current = false;\n        array[j].current = false;\n      });\n      break;\n\n    default:\n      break;\n  }\n\n  state.sorting = false;\n}","map":null,"metadata":{},"sourceType":"module"}