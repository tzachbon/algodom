{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { toJS } from 'mobx';\n\nfunction partition(arr, swappedFn, left, right) {\n  var middle, pivot, i, j, temp;\n  return _regeneratorRuntime.async(function partition$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          middle = Math.floor((right + left) / 2), pivot = arr[middle].value, i = left, j = right; // Start pointer at the last item in the array\n\n        case 1:\n          if (!(i <= j)) {\n            _context.next = 14;\n            break;\n          }\n\n          // Move left pointer to the right until the value at the\n          // left is greater than the pivot value\n          while (arr[i].value < pivot) {\n            i++;\n          } // Move right pointer to the left until the value at the\n          // right is less than the pivot value\n\n\n          while (arr[j].value > pivot) {\n            j--;\n          } // If the left pointer is less than or equal to the\n          // right pointer, then swap values\n\n\n          if (!(i <= j)) {\n            _context.next = 12;\n            break;\n          }\n\n          temp = arr[i].value;\n          arr[i].value = arr[j].value;\n          arr[j].value = temp;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(swappedFn(i, j));\n\n        case 10:\n          i++;\n          j--;\n\n        case 12:\n          _context.next = 1;\n          break;\n\n        case 14:\n          return _context.abrupt(\"return\", i);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction quickSort(arr, swappedFn) {\n  var left,\n      right,\n      len,\n      index,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function quickSort$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          left = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : 0;\n          right = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : arr.length - 1;\n          len = arr.length;\n\n          if (!(len > 1)) {\n            _context2.next = 13;\n            break;\n          }\n\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(partition(arr, swappedFn, left, right));\n\n        case 6:\n          index = _context2.sent;\n\n          if (!(left < index - 1)) {\n            _context2.next = 10;\n            break;\n          }\n\n          _context2.next = 10;\n          return _regeneratorRuntime.awrap(quickSort(arr, swappedFn, left, index - 1));\n\n        case 10:\n          if (!(index < right)) {\n            _context2.next = 13;\n            break;\n          }\n\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(quickSort(arr, swappedFn, index, right));\n\n        case 13:\n          return _context2.abrupt(\"return\");\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default function useQuickSort(array, swappedFn) {\n  return _regeneratorRuntime.async(function useQuickSort$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          array = toJS(array);\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(quickSort(array, swappedFn));\n\n        case 3:\n          return _context3.abrupt(\"return\", array);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":null,"metadata":{},"sourceType":"module"}