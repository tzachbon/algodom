{"ast":null,"code":"import { toJS } from 'mobx';\n\nasync function partition(arr, swappedFn, left, right) {\n  let middle = Math.floor((right + left) / 2),\n      pivot = arr[middle].value,\n      i = left,\n      // Start pointer at the first item in the array\n  j = right; // Start pointer at the last item in the array\n\n  while (i <= j) {\n    // Move left pointer to the right until the value at the\n    // left is greater than the pivot value\n    while (arr[i].value < pivot) {\n      i++;\n    } // Move right pointer to the left until the value at the\n    // right is less than the pivot value\n\n\n    while (arr[j].value > pivot) {\n      j--;\n    } // If the left pointer is less than or equal to the\n    // right pointer, then swap values\n\n\n    if (i <= j) {\n      const temp = arr[i].value;\n      arr[i].value = arr[j].value;\n      arr[j].value = temp;\n      await swappedFn(i, j);\n      i++;\n      j--;\n    }\n  }\n\n  return i;\n}\n\nasync function quickSort(arr, swappedFn, left = 0, right = arr.length - 1) {\n  let len = arr.length,\n      index;\n\n  if (len > 1) {\n    index = await partition(arr, swappedFn, left, right);\n\n    if (left < index - 1) {\n      await quickSort(arr, swappedFn, left, index - 1);\n    }\n\n    if (index < right) {\n      await quickSort(arr, swappedFn, index, right);\n    }\n  }\n\n  return;\n}\n\nexport default async function useQuickSort(array, swappedFn) {\n  array = toJS(array);\n  await quickSort(array, swappedFn);\n  return array;\n}","map":null,"metadata":{},"sourceType":"module"}