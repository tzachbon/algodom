{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { toJS } from 'mobx';\nimport { observer } from 'mobx-react';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport ClassNames from '../../utils/classnames';\nimport { sortFunctions } from '../../utils/sort/sort';\nimport { startCase } from 'lodash';\nimport './style.scss';\n\nvar TestSortsDialog = function TestSortsDialog(_ref) {\n  var className = _ref.className,\n      open = _ref.open,\n      array = _ref.array,\n      updateOpen = _ref.updateOpen;\n\n  var _useState = useState([]),\n      sortEntries = _useState[0],\n      setSortEntries = _useState[1];\n\n  var cloneArray = useMemo(function () {\n    return toJS(array);\n  }, [array]);\n\n  var handleClose = function handleClose() {\n    return updateOpen(false);\n  };\n\n  useEffect(function () {\n    open && calculateSpeed();\n  }, [open]);\n\n  var calculateSpeed = function calculateSpeed() {\n    var entries, _i, _Object$entries, _Object$entries$_i, name, fn, now;\n\n    return _regeneratorRuntime.async(function calculateSpeed$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            entries = [];\n            _i = 0, _Object$entries = Object.entries(sortFunctions);\n\n          case 2:\n            if (!(_i < _Object$entries.length)) {\n              _context.next = 11;\n              break;\n            }\n\n            _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), name = _Object$entries$_i[0], fn = _Object$entries$_i[1];\n            now = performance.now();\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(fn(cloneArray, function () {\n              return Promise.resolve();\n            }));\n\n          case 7:\n            entries.push([name, performance.now() - now]);\n\n          case 8:\n            _i++;\n            _context.next = 2;\n            break;\n\n          case 11:\n            setSortEntries(entries);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(\"div\", {\n    className: ClassNames(className, 'TestSortsDialog')\n  }, __jsx(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"alert-dialog-title\",\n    \"aria-describedby\": \"alert-dialog-description\"\n  }, __jsx(DialogTitle, {\n    id: \"alert-dialog-title\"\n  }, \"Test Sorting Speed\"), __jsx(DialogContent, {\n    className: \"TestSortsDialog__DialogContent\"\n  }, sortEntries.map(function (_ref2, i) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        name = _ref3[0],\n        value = _ref3[1];\n\n    return __jsx(\"div\", {\n      key: \"\".concat(name, \"__\").concat(i, \"__test-sort-dialog\")\n    }, __jsx(\"span\", {\n      className: \"name\"\n    }, startCase(name)), __jsx(\"span\", {\n      className: \"value\"\n    }, value.toFixed(3)));\n  })), __jsx(DialogActions, null, __jsx(Button, {\n    onClick: handleClose,\n    color: \"primary\"\n  }, \"Close\"), __jsx(Button, {\n    onClick: calculateSpeed,\n    color: \"primary\",\n    variant: \"outlined\",\n    autoFocus: true\n  }, \"Run test\"))));\n};\n\nexport default observer(TestSortsDialog);","map":null,"metadata":{},"sourceType":"module"}