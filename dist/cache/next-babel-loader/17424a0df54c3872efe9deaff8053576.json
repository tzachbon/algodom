{"ast":null,"code":"import { toJS } from 'mobx';\nexport default async function useHeapSort(array, swappedFn) {\n  array = toJS(array);\n  await heapSort(array, swappedFn);\n  return array;\n}\n\nasync function maxHeap(array, i, arrLength, swappedFn) {\n  const left = 2 * i + 1;\n  const right = 2 * i + 2;\n  let max = i;\n\n  if (left < arrLength && array[left].value > array[max].value) {\n    max = left;\n  }\n\n  if (right < arrLength && array[right].value > array[max].value) {\n    max = right;\n  }\n\n  if (max != i) {\n    await swap(array, i, max, swappedFn);\n    await maxHeap(array, max, arrLength, swappedFn);\n  }\n}\n\nasync function swap(array, indexA, indexB, swappedFn) {\n  await swappedFn(indexA, indexB);\n  const temp = array[indexA].value;\n  array[indexA].value = array[indexB].value;\n  array[indexB].value = temp;\n}\n\nasync function heapSort(array, swappedFn) {\n  let arrLength = array.length;\n\n  for (let i = Math.floor(arrLength / 2); i >= 0; i -= 1) {\n    await maxHeap(array, i, arrLength, swappedFn);\n  }\n\n  for (let i = array.length - 1; i > 0; i--) {\n    await swap(array, 0, i, swappedFn);\n    arrLength--;\n    await maxHeap(array, 0, arrLength, swappedFn);\n  }\n\n  return;\n}","map":null,"metadata":{},"sourceType":"module"}