{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { toJS } from 'mobx';\nexport default async function useMergeSort(array, swappedFn) {\n  array = toJS(array).map((element, originalIndex) => _objectSpread({}, element, {\n    originalIndex\n  }));\n  const newArray = await mergeHelper(array, swappedFn);\n  return newArray;\n}\n\nconst mergeHelper = async (array, swappedFn) => {\n  if (array.length < 2) return array;\n  const mid = Math.floor(array.length / 2);\n  const left = array.slice(0, mid);\n  const right = array.slice(mid);\n  return doMerge((await mergeHelper(left, swappedFn)), (await mergeHelper(right, swappedFn)), swappedFn);\n};\n\nconst doMerge = async (left, right, swappedFn) => {\n  let results = [];\n\n  while (left.length && right.length) {\n    results.push(left[0].value < right[0].value ? left.shift() : right.shift());\n  }\n\n  results = [...results, ...left, ...right];\n  const onlyIndexes = results.map(({\n    originalIndex\n  }) => originalIndex);\n  await swappedFn(Math.min(...onlyIndexes), Math.max(...onlyIndexes), results);\n  return results;\n};","map":null,"metadata":{},"sourceType":"module"}