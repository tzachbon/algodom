{"ast":null,"code":"var __jsx = React.createElement;\nimport Button from '@material-ui/core/Button';\nimport { observer, useLocalStore } from 'mobx-react';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport SelectAlgorithm from '../components/SelectAlgorithm';\nimport SortMenu from '../components/SortMenu';\nimport SortSlider from '../components/SortSlider';\nimport ClassNames from '../utils/classnames';\nimport randomInRange from '../utils/randomInRange';\nimport { shuffle } from '../utils/shuffle';\nimport useSort from '../utils/sort/sort';\nimport createKey from '../utils/uuid';\nimport SortElement from '../components/SortElement';\nimport { sortsArray } from '../utils/sort/sort';\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const MAX_SORT_ELEMENTS = 85;\n\nconst Sort = ({\n  className\n}) => {\n  var _sortMenuRef$current;\n\n  className = ClassNames(className, 'Sort');\n  const state = useLocalStore(() => ({\n    elements: [],\n    speed: 1,\n    currentAlgorithm: 'merge-sort',\n    sorting: false\n  }));\n  const sortMenuRef = useRef(null);\n  useEffect(() => {\n    onReset();\n  }, []);\n  const delayBySpeed = useCallback(async (first = true) => {\n    switch (state.speed) {\n      case 0:\n        await delay(35);\n        break;\n\n      case 1:\n        first && (await delay(20));\n        break;\n\n      default:\n        first && (await delay(0));\n        break;\n    }\n  }, [state.speed]);\n  const updateElements = useCallback(length => {\n    if (state.elements.length > length) {\n      state.elements = state.elements.slice(0, length);\n    } else if (state.elements.length < length) {\n      const diff = Math.abs(length - state.elements.length);\n      const newArray = Array(diff).fill(null).map(() => ({\n        value: Math.min(Math.floor(Math.random() * length) + 1, MAX_SORT_ELEMENTS),\n        key: createKey()\n      }));\n      state.elements = [...state.elements, ...newArray];\n    }\n  }, [state.elements]);\n  const onSort = useCallback(async () => await useSort(state, delayBySpeed), [state, state.speed, state.currentAlgorithm, state.elements, state.sorting]);\n  const cancelSort = useCallback(() => state.sorting = false, [state.sorting]);\n  const onReset = useCallback(() => {\n    cancelSort();\n\n    if (state.elements.length) {\n      shuffle(state.elements);\n    } else {\n      updateElements(randomInRange(20, MAX_SORT_ELEMENTS));\n    }\n  }, [state.elements]);\n  return __jsx(\"div\", {\n    className: className\n  }, __jsx(\"div\", {\n    className: \"titles\"\n  }, __jsx(\"h1\", null, \"Sorting Algorithm\"), __jsx(\"p\", null, \"Please select array size and choose algorithm\")), __jsx(\"div\", {\n    className: \"controls\"\n  }, __jsx(SortSlider, {\n    disabled: state.sorting,\n    value: state.elements.length,\n    updateElements: updateElements\n  }), __jsx(SelectAlgorithm, {\n    defaultValue: state.currentAlgorithm,\n    updateAlgo: algo => state.currentAlgorithm = algo,\n    algorithms: sortsArray,\n    disabled: state.sorting\n  }), __jsx(Button, {\n    onClick: state.sorting ? cancelSort : onSort,\n    variant: \"contained\",\n    disabled: !state.currentAlgorithm,\n    color: state.sorting ? 'default' : 'primary'\n  }, state.sorting ? 'Pause' : 'Start!'), __jsx(Button, {\n    onClick: sortMenuRef === null || sortMenuRef === void 0 ? void 0 : (_sortMenuRef$current = sortMenuRef.current) === null || _sortMenuRef$current === void 0 ? void 0 : _sortMenuRef$current.handleClick,\n    variant: \"outlined\",\n    color: \"default\"\n  }, \"Settings\"), __jsx(SortMenu, {\n    array: state.elements,\n    onSpeedChanged: speed => state.speed = speed,\n    speed: state.speed,\n    onReset: onReset,\n    ref: sortMenuRef\n  })), __jsx(\"div\", {\n    className: \"elements\"\n  }, state.elements.map(element => __jsx(SortElement, element))));\n};\n\nexport default observer(Sort);","map":null,"metadata":{},"sourceType":"module"}